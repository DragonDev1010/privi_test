// import logo from './logo.svg';
// import './App.css';
// import Web3 from 'web3';
// import { useCallback } from 'react';


// const App =  () => {
//   let web3 = null
//   web3 = new Web3(Web3.givenProvider || 'HTTP://127.0.0.1:7545')
  
//   const accounts =  web3.eth.getAccounts()
//   useCallback(() => {
//     accounts = await web3.eth.getAccounts()
//   }, [web3])
//   console.log(accounts[0])
//   return (
//     <div className="App">
//       sdf
//     </div>
//   );
// }

// export default App;



import { reject } from 'q'
import React, { Component } from 'react'
import Web3 from 'web3'
import './App.css'
// import sigUtil from 'eth-sig-util'

class App extends Component {
  componentWillMount() {
    this.loadBlockchainData()
  }

  async loadBlockchainData() {
    // const web3 = new Web3(Web3.givenProvider || "HTTP://127.0.0.1:7545")
    
    
    // const accounts = await web3.eth.getAccounts()
    
    // this.setState({ account: accounts[0] })
  }

  constructor(props) {
    super(props)
    this.state = { account: '', signResult: ''}
    this.sign = this.sign.bind(this)
    this.verify = this.verify.bind(this)
    this.test = this.test.bind(this)
  }
  test() {
    this.setState({account: 'cdg cdg'})
  }
  async sign() {
    
    const web3 = new Web3(Web3.givenProvider || "HTTP://127.0.0.1:7545")
    const accounts = await web3.eth.getAccounts()
    // await web3.eth.sign(web3.utils.utf8ToHex("hello"), accounts[0], console.log)
    const msgParams = JSON.stringify({
      domain: {
        // Defining the chain aka Rinkeby testnet or Ethereum Main Net
        chainId: 97,
        // Give a user friendly name to the specific contract you are signing for.
        name: 'Ether Mail',
        // If name isn't enough add verifying contract to make sure you are establishing contracts with the proper entity
        verifyingContract: '0xCcCCccccCCCCcCCCCCCcCcCccCcCCCcCcccccccC',
        // Just let's you know the latest version. Definitely make sure the field name is correct.
        version: '1',
      },
  
      // Defining the message signing data content.
      message: {
        /*
         - Anything you want. Just a JSON Blob that encodes the data you want to send
         - No required fields
         - This is DApp Specific
         - Be as explicit as possible when building out the message schema.
        */
        contents: 'Hello, Bob!',
        attachedMoneyInEth: 4.2,
        from: {
          name: 'Cow',
          wallets: [
            '0xCD2a3d9F938E13CD947Ec05AbC7FE734Df8DD826',
            '0xDeaDbeefdEAdbeefdEadbEEFdeadbeEFdEaDbeeF',
          ],
        },
        to: [
          {
            name: 'Bob',
            wallets: [
              '0xbBbBBBBbbBBBbbbBbbBbbbbBBbBbbbbBbBbbBBbB',
              '0xB0BdaBea57B0BDABeA57b0bdABEA57b0BDabEa57',
              '0xB0B0b0b0b0b0B000000000000000000000000000',
            ],
          },
        ]
      },
      primaryType: 'Mail',
      types: {
        // TODO: Clarify if EIP712Domain refers to the domain the contract is hosted on
        EIP712Domain: [
          { name: 'name', type: 'string' },
          { name: 'version', type: 'string' },
          { name: 'chainId', type: 'uint256' },
          { name: 'verifyingContract', type: 'address' },
        ],
        // Not an EIP712Domain definition
        Group: [
          { name: 'name', type: 'string' },
          { name: 'members', type: 'Person[]' },
        ],
        // Refer to PrimaryType
        Mail: [
          { name: 'from', type: 'Person' },
          { name: 'to', type: 'Person[]' },
          { name: 'contents', type: 'string' },
        ],
        // Not an EIP712Domain definition
        Person: [
          { name: 'name', type: 'string' },
          { name: 'wallets', type: 'address[]' },
        ],
      },
    });
  
    var from = accounts[0]
  
    var params = [from, msgParams];
    var method = 'eth_signTypedData_v4';  
    var res = ''
    web3.currentProvider.sendAsync(
      {
        method,
        params,
        from,
      },
      function (err, result) {
        if (err) return console.dir(err);
        if (result.error) {
          alert(result.error.message);
        }
        if (result.error) return console.error('ERROR', result);
        
        res = JSON.stringify(result.result)
        console.log('TYPED SIGNED:' + res);
      }
    );
    this.setState({
      signResult: "res"
    })    
    console.log(this.state.signResult)
  }
  async verify() {
    // const msgSender = sigUtil.recoverTypedSignature_v4()
    console.log(this.state.signResult)
  }
  render() {
    return (
      <div className="container">
        <h1>Hello, World!</h1>
        <p>Your account: {this.state.account}</p>
        <button onClick = {this.sign}>Sign</button>
        <button onClick = {this.verify}>verify</button>
        <button onClick = {this.test}>test</button>
      </div>
    );
  }
}

export default App;
